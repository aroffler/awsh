#!/usr/bin/env bash
#
# Simple credentials creation
#

##############################################################################
# Shell Behaviour
##############################################################################

# Check for unbound variables being used
# set -o nounset

# Exit is a bad command is attempted. If you're going to handle errors then
# leave this disabled
# set -o errexit

# Exit if any of the commands in a pipeline exit with a non-zero exit code
# set -o pipefail

##############################################################################
# Variables
##############################################################################

CONST_COMMAND_LINE="$@"
CONST_OS_VERSION=$(uname -r)
CONST_SYSTEM_TYPE=$(uname -m)
CONST_SCRIPT_NAME=${0##*/}

# Default for AWSH_ROOT if unset
: "${AWSH_ROOT:='/opt/awsh'}"

# Load the Frameverk
source ${AWSH_ROOT}/etc/awshrc

# Current logging config
TTY_OUTPUT_ENABLED=$TRUE
LOG_OUTPUT_ENABLED=$TRUE
SYSLOG_OUTPUT_ENABLED=$FALSE
EVENT_OUTPUT_ENABLED=$TRUE
export TTY_OUTPUT_ENABLED LOG_OUTPUT_ENABLED SYSLOG_OUTPUT_ENABLED EVENT_OUTPUT_ENABLED

# Default log file
DEFAULT_OUT="${HOME}/.awsh/log/${CONST_SCRIPT_NAME}.log"
# Define somewhere for specific log messages to go
EVENT_LOG="${HOME}/.awsh/log/${CONST_SCRIPT_NAME}_events.log"
export DEFAULT_OUT EVENT_LOG

# Trap  abnormal termination
trap cleanup 1 2 3 15


##############################################################################
# Functions
##############################################################################

function show_usage {
    cat <<EOF
usage: $CONST_SCRIPT_NAME [--help]

Simple wrapper to create a basic AWSH profile

EOF
}


function cleanup {
    echo "Exiting."
    exit 1
}


# show help for no arguments if stdin is a terminal
if [ "$1" == '-h' ] || [ "$1" == '--help' ] || [ "$1" == 'help' ]
then
    show_usage
    exit 0
fi

# As there's only 1 option it's value will be in $2
id_default_region="${3:-'eu-west-1'}"


##############################################################################
# Main Script
##############################################################################

echo "AWSH-ID - Identity Name (eg. PERSONAL-ROOT-jeff-eu-west-1, PERSONAL-IAM-jeff-us-eest-1) "
read -p "Name: " id_name

if [ ! -d "$HOME/.awsh/identities/${id_name}" ]; then
    mkdir -p $HOME/.awsh/identities/${id_name}
else
    echo "AWSH-ID: Name already exists!"
    exit 1
fi

read -p "AWSH-ID - AWS Access Key: " id_access_key
read -p "AWSH-ID - AWS Secret: " id_secret
read -p "AWSH-ID - AWS Default Region: " id_default_region

config_file="$HOME/.awsh/identities/${id_name}/aws.conf"
cat > "${config_file}" <<EOF
[default]
output=json
aws_access_key_id=${id_access_key}
aws_secret_access_key=${id_secret}
region=${id_default_region}

[preview]
cloudfront=true
EOF

ssh_key_file="$HOME/.awsh/identities/${id_name}/ssh_id.pem"
touch ${ssh_key_file}
chmod 400 ${ssh_key_file}

echo "AWSH-ID - Basic Identity created: ${config_file}"
