#!/usr/bin/env bash
#
# Simple update report
#

##############################################################################
# Shell Behaviour
##############################################################################

# Check for unbound variables being used
# set -o nounset

# Exit is a bad command is attempted. If you're going to handle errors then
# leave this disabled
# set -o errexit

# Exit if any of the commands in a pipeline exit with a non-zero exit code
# set -o pipefail

##############################################################################
# Variables
##############################################################################

CONST_COMMAND_LINE="$@"
CONST_OS_VERSION=$(uname -r)
CONST_SYSTEM_TYPE=$(uname -m)
CONST_SCRIPT_NAME=${0##*/}

# Default for AWSH_ROOT if unset
: "${AWSH_ROOT:='/opt/awsh'}"

# Load the Frameverk
source "${AWSH_ROOT}/etc/awshrc"

# Current logging config
TTY_OUTPUT_ENABLED=$TRUE
LOG_OUTPUT_ENABLED=$TRUE
SYSLOG_OUTPUT_ENABLED=$FALSE
EVENT_OUTPUT_ENABLED=$TRUE
export TTY_OUTPUT_ENABLED LOG_OUTPUT_ENABLED SYSLOG_OUTPUT_ENABLED EVENT_OUTPUT_ENABLED

# Default log file
DEFAULT_OUT="${AWSH_ROOT}/log/${CONST_SCRIPT_NAME}.log"
# Define somewhere for specific log messages to go
EVENT_LOG="${AWSH_ROOT}/log/${CONST_SCRIPT_NAME}_events.log"
export DEFAULT_OUT EVENT_LOG

# Trap  abnormal termination
trap cleanup 1 2 3 15

##############################################################################
# Functions
##############################################################################

function show_usage {
    cat <<EOF
usage: $CONST_SCRIPT_NAME [--help]

This script will attempt to update your AWSH install by pulling the latest
version from the configured source

EOF
}


function cleanup {
    echo "Exiting."
    exit 1
}


function require_clean_work_tree {
    # Update the index
    git update-index -q --ignore-submodules --refresh
    err=0

    # Disallow unstaged changes in the working tree
    if ! git diff-files --quiet --ignore-submodules --
    then
        echo >&2 "cannot $1: you have unstaged changes."
        git diff-files --name-status -r --ignore-submodules -- >&2
        err=1
    fi

    # Disallow uncommitted changes in the index
    if ! git diff-index --cached --quiet HEAD --ignore-submodules --
    then
        echo >&2 "cannot $1: your index contains uncommitted changes."
        git diff-index --cached --name-status -r --ignore-submodules HEAD -- >&2
        err=1
    fi

    if [ $err = 1 ]; then
        echo >&2 "Please commit or stash them."
        exit 1
    fi
}


# show help for no arguments if stdin is a terminal
if [ "$1" == '-h' ] || [ "$1" == '--help' ] || [ "$1" == 'help' ]; then
    show_usage
    exit 0
fi


##############################################################################
# Main Script
##############################################################################

echo "AWSH | Attempting Upgrade"
pushd "${AWSH_ROOT}"
require_clean_work_tree
git pull
echo "AWSH | Ensuring requirements are present"
"${AWSH_ROOT}/local/python/bin/pip" install -r "${AWSH_ROOT}/requirements/requirements.python2"
popd
echo "AWSH | Status: $(awsh version)"
